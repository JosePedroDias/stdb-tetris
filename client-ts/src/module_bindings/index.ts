// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { MoveDown } from "./move_down_reducer.ts";
export { MoveDown };
import { MoveLeft } from "./move_left_reducer.ts";
export { MoveLeft };
import { MoveRight } from "./move_right_reducer.ts";
export { MoveRight };

// Import and reexport all table handle types
import { BoardDataTableHandle } from "./board_data_table.ts";
export { BoardDataTableHandle };
import { CellTableHandle } from "./cell_table.ts";
export { CellTableHandle };

// Import and reexport all types
import { BoardData } from "./board_data_type.ts";
export { BoardData };
import { Cell } from "./cell_type.ts";
export { Cell };

const REMOTE_MODULE = {
  tables: {
    board_data: {
      tableName: "board_data",
      rowType: BoardData.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    cell: {
      tableName: "cell",
      rowType: Cell.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    move_down: {
      reducerName: "move_down",
      argsType: MoveDown.getTypeScriptAlgebraicType(),
    },
    move_left: {
      reducerName: "move_left",
      argsType: MoveLeft.getTypeScriptAlgebraicType(),
    },
    move_right: {
      reducerName: "move_right",
      argsType: MoveRight.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "MoveDown", args: MoveDown }
| { name: "MoveLeft", args: MoveLeft }
| { name: "MoveRight", args: MoveRight }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  moveDown() {
    this.connection.callReducer("move_down", new Uint8Array(0), this.setCallReducerFlags.moveDownFlags);
  }

  onMoveDown(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("move_down", callback);
  }

  removeOnMoveDown(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("move_down", callback);
  }

  moveLeft() {
    this.connection.callReducer("move_left", new Uint8Array(0), this.setCallReducerFlags.moveLeftFlags);
  }

  onMoveLeft(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("move_left", callback);
  }

  removeOnMoveLeft(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("move_left", callback);
  }

  moveRight() {
    this.connection.callReducer("move_right", new Uint8Array(0), this.setCallReducerFlags.moveRightFlags);
  }

  onMoveRight(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("move_right", callback);
  }

  removeOnMoveRight(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("move_right", callback);
  }

}

export class SetReducerFlags {
  moveDownFlags: CallReducerFlags = 'FullUpdate';
  moveDown(flags: CallReducerFlags) {
    this.moveDownFlags = flags;
  }

  moveLeftFlags: CallReducerFlags = 'FullUpdate';
  moveLeft(flags: CallReducerFlags) {
    this.moveLeftFlags = flags;
  }

  moveRightFlags: CallReducerFlags = 'FullUpdate';
  moveRight(flags: CallReducerFlags) {
    this.moveRightFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get boardData(): BoardDataTableHandle {
    return new BoardDataTableHandle(this.connection.clientCache.getOrCreateTable<BoardData>(REMOTE_MODULE.tables.board_data));
  }

  get cell(): CellTableHandle {
    return new CellTableHandle(this.connection.clientCache.getOrCreateTable<Cell>(REMOTE_MODULE.tables.cell));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
